
GccApplication2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  0000058e  00000622  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000058e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000010  00800102  00800102  00000624  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000624  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000654  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000088  00000000  00000000  00000690  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000bc0  00000000  00000000  00000718  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000918  00000000  00000000  000012d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000005d1  00000000  00000000  00001bf0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000280  00000000  00000000  000021c4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000497  00000000  00000000  00002444  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000560  00000000  00000000  000028db  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000068  00000000  00000000  00002e3b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	84 c0       	rjmp	.+264    	; 0x11e <__vector_5>
  16:	00 00       	nop
  18:	f9 c0       	rjmp	.+498    	; 0x20c <__vector_6>
  1a:	00 00       	nop
  1c:	6e c1       	rjmp	.+732    	; 0x2fa <__vector_7>
  1e:	00 00       	nop
  20:	e3 c1       	rjmp	.+966    	; 0x3e8 <__vector_8>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	46 c2       	rjmp	.+1164   	; 0x4d6 <__vector_18>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ee e8       	ldi	r30, 0x8E	; 142
  a0:	f5 e0       	ldi	r31, 0x05	; 5
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a2 30       	cpi	r26, 0x02	; 2
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a2 e0       	ldi	r26, 0x02	; 2
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a2 31       	cpi	r26, 0x12	; 18
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	02 d0       	rcall	.+4      	; 0xc8 <main>
  c4:	62 c2       	rjmp	.+1220   	; 0x58a <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <main>:
unsigned int i=3;
int arr[7];
int j;

int main(void)
{
  c8:	e2 e0       	ldi	r30, 0x02	; 2
  ca:	f1 e0       	ldi	r31, 0x01	; 1
  cc:	80 e1       	ldi	r24, 0x10	; 16
  ce:	91 e0       	ldi	r25, 0x01	; 1
	for(j=0;j<7;++j)
	arr[j] = 0;
  d0:	11 92       	st	Z+, r1
  d2:	11 92       	st	Z+, r1
int arr[7];
int j;

int main(void)
{
	for(j=0;j<7;++j)
  d4:	e8 17       	cp	r30, r24
  d6:	f9 07       	cpc	r31, r25
  d8:	d9 f7       	brne	.-10     	; 0xd0 <main+0x8>
  da:	87 e0       	ldi	r24, 0x07	; 7
  dc:	90 e0       	ldi	r25, 0x00	; 0
  de:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <j+0x1>
  e2:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <j>
	arr[j] = 0;
	USART_Init(12);
  e6:	8c e0       	ldi	r24, 0x0C	; 12
  e8:	90 e0       	ldi	r25, 0x00	; 0
  ea:	3b d2       	rcall	.+1142   	; 0x562 <USART_Init>
	DDRE &=~((1<<PINE4)|(1<<PINE5)|(1<<PINE6)|(1<<PINE7));
  ec:	82 b1       	in	r24, 0x02	; 2
  ee:	8f 70       	andi	r24, 0x0F	; 15
  f0:	82 b9       	out	0x02, r24	; 2
	DDRF|=(1<<PINF0)|(1<<PINF2)|(1<<PINF4)|(1<<PINF6);
  f2:	e1 e6       	ldi	r30, 0x61	; 97
  f4:	f0 e0       	ldi	r31, 0x00	; 0
  f6:	80 81       	ld	r24, Z
  f8:	85 65       	ori	r24, 0x55	; 85
  fa:	80 83       	st	Z, r24
	PORTF &=~((1<<PINF0)|(1<<PINF2)|(1<<PINF4)|(1<<PINF6));
  fc:	e2 e6       	ldi	r30, 0x62	; 98
  fe:	f0 e0       	ldi	r31, 0x00	; 0
 100:	80 81       	ld	r24, Z
 102:	8a 7a       	andi	r24, 0xAA	; 170
 104:	80 83       	st	Z, r24
	PORTF|=(1<<PINF0)|(1<<PINF2)|(1<<PINF4)|(1<<PINF6);
 106:	80 81       	ld	r24, Z
 108:	85 65       	ori	r24, 0x55	; 85
 10a:	80 83       	st	Z, r24
	EIMSK|=(1<<INT4)|(1<<INT5)|(1<<INT6)|(1<<INT7);
 10c:	89 b7       	in	r24, 0x39	; 57
 10e:	80 6f       	ori	r24, 0xF0	; 240
 110:	89 bf       	out	0x39, r24	; 57
	EICRB|=(1<<ISC40)|(1<<ISC41)|(1<<ISC50)|(1<<ISC51)|(1<<ISC60)|(1<<ISC61)|(1<<ISC70)|(1<<ISC71);
 112:	8a b7       	in	r24, 0x3a	; 58
 114:	8f ef       	ldi	r24, 0xFF	; 255
 116:	8a bf       	out	0x3a, r24	; 58
	UCSR0B|=(1<<RXCIE0);
 118:	57 9a       	sbi	0x0a, 7	; 10
	sei();
 11a:	78 94       	sei
 11c:	ff cf       	rjmp	.-2      	; 0x11c <main+0x54>

0000011e <__vector_5>:
    }
}


ISR(INT4_vect)//Buzzer1
{   
 11e:	1f 92       	push	r1
 120:	0f 92       	push	r0
 122:	0f b6       	in	r0, 0x3f	; 63
 124:	0f 92       	push	r0
 126:	11 24       	eor	r1, r1
 128:	0b b6       	in	r0, 0x3b	; 59
 12a:	0f 92       	push	r0
 12c:	2f 93       	push	r18
 12e:	3f 93       	push	r19
 130:	4f 93       	push	r20
 132:	5f 93       	push	r21
 134:	6f 93       	push	r22
 136:	7f 93       	push	r23
 138:	8f 93       	push	r24
 13a:	9f 93       	push	r25
 13c:	af 93       	push	r26
 13e:	bf 93       	push	r27
 140:	cf 93       	push	r28
 142:	df 93       	push	r29
 144:	ef 93       	push	r30
 146:	ff 93       	push	r31
	if(i<7)
 148:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 14c:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 150:	87 30       	cpi	r24, 0x07	; 7
 152:	91 05       	cpc	r25, r1
 154:	a0 f5       	brcc	.+104    	; 0x1be <__vector_5+0xa0>
	{
		if((arr[i-1]==1)||(arr[i-3]==1)||(arr[i-2]==1))
 156:	fc 01       	movw	r30, r24
 158:	ee 0f       	add	r30, r30
 15a:	ff 1f       	adc	r31, r31
 15c:	e0 50       	subi	r30, 0x00	; 0
 15e:	ff 4f       	sbci	r31, 0xFF	; 255
 160:	20 81       	ld	r18, Z
 162:	31 81       	ldd	r19, Z+1	; 0x01
 164:	21 30       	cpi	r18, 0x01	; 1
 166:	31 05       	cpc	r19, r1
 168:	a1 f0       	breq	.+40     	; 0x192 <__vector_5+0x74>
 16a:	fc 01       	movw	r30, r24
 16c:	ee 0f       	add	r30, r30
 16e:	ff 1f       	adc	r31, r31
 170:	e4 50       	subi	r30, 0x04	; 4
 172:	ff 4f       	sbci	r31, 0xFF	; 255
 174:	20 81       	ld	r18, Z
 176:	31 81       	ldd	r19, Z+1	; 0x01
 178:	21 30       	cpi	r18, 0x01	; 1
 17a:	31 05       	cpc	r19, r1
 17c:	51 f0       	breq	.+20     	; 0x192 <__vector_5+0x74>
 17e:	fc 01       	movw	r30, r24
 180:	ee 0f       	add	r30, r30
 182:	ff 1f       	adc	r31, r31
 184:	e2 50       	subi	r30, 0x02	; 2
 186:	ff 4f       	sbci	r31, 0xFF	; 255
 188:	20 81       	ld	r18, Z
 18a:	31 81       	ldd	r19, Z+1	; 0x01
 18c:	21 30       	cpi	r18, 0x01	; 1
 18e:	31 05       	cpc	r19, r1
 190:	41 f4       	brne	.+16     	; 0x1a2 <__vector_5+0x84>
		arr[i]=0;
 192:	88 0f       	add	r24, r24
 194:	99 1f       	adc	r25, r25
 196:	fc 01       	movw	r30, r24
 198:	ee 5f       	subi	r30, 0xFE	; 254
 19a:	fe 4f       	sbci	r31, 0xFE	; 254
 19c:	11 82       	std	Z+1, r1	; 0x01
 19e:	10 82       	st	Z, r1
 1a0:	0e c0       	rjmp	.+28     	; 0x1be <__vector_5+0xa0>
		else
		{arr[i]=1;
 1a2:	fc 01       	movw	r30, r24
 1a4:	ee 0f       	add	r30, r30
 1a6:	ff 1f       	adc	r31, r31
 1a8:	ee 5f       	subi	r30, 0xFE	; 254
 1aa:	fe 4f       	sbci	r31, 0xFE	; 254
 1ac:	21 e0       	ldi	r18, 0x01	; 1
 1ae:	30 e0       	ldi	r19, 0x00	; 0
 1b0:	31 83       	std	Z+1, r19	; 0x01
 1b2:	20 83       	st	Z, r18
	    i++;
 1b4:	01 96       	adiw	r24, 0x01	; 1
 1b6:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
 1ba:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
		
	}
		
		
	
	uart_data_transmit('A');
 1be:	81 e4       	ldi	r24, 0x41	; 65
 1c0:	dc d1       	rcall	.+952    	; 0x57a <uart_data_transmit>
	uart_data_transmit(arr[3]+'0');
 1c2:	c2 e0       	ldi	r28, 0x02	; 2
 1c4:	d1 e0       	ldi	r29, 0x01	; 1
 1c6:	8e 81       	ldd	r24, Y+6	; 0x06
 1c8:	80 5d       	subi	r24, 0xD0	; 208
	uart_data_transmit(arr[4]+'0');
 1ca:	d7 d1       	rcall	.+942    	; 0x57a <uart_data_transmit>
 1cc:	88 85       	ldd	r24, Y+8	; 0x08
	uart_data_transmit(arr[5]+'0');
 1ce:	80 5d       	subi	r24, 0xD0	; 208
 1d0:	d4 d1       	rcall	.+936    	; 0x57a <uart_data_transmit>
	uart_data_transmit(arr[6]+'0');
 1d2:	8a 85       	ldd	r24, Y+10	; 0x0a
 1d4:	80 5d       	subi	r24, 0xD0	; 208
 1d6:	d1 d1       	rcall	.+930    	; 0x57a <uart_data_transmit>
	//USART_TransmitString(arr);
	uart_data_transmit('B');
 1d8:	8c 85       	ldd	r24, Y+12	; 0x0c
 1da:	80 5d       	subi	r24, 0xD0	; 208
 1dc:	ce d1       	rcall	.+924    	; 0x57a <uart_data_transmit>
	
}
 1de:	82 e4       	ldi	r24, 0x42	; 66
 1e0:	cc d1       	rcall	.+920    	; 0x57a <uart_data_transmit>
 1e2:	ff 91       	pop	r31
 1e4:	ef 91       	pop	r30
 1e6:	df 91       	pop	r29
 1e8:	cf 91       	pop	r28
 1ea:	bf 91       	pop	r27
 1ec:	af 91       	pop	r26
 1ee:	9f 91       	pop	r25
 1f0:	8f 91       	pop	r24
 1f2:	7f 91       	pop	r23
 1f4:	6f 91       	pop	r22
 1f6:	5f 91       	pop	r21
 1f8:	4f 91       	pop	r20
 1fa:	3f 91       	pop	r19
 1fc:	2f 91       	pop	r18
 1fe:	0f 90       	pop	r0
 200:	0b be       	out	0x3b, r0	; 59
 202:	0f 90       	pop	r0
 204:	0f be       	out	0x3f, r0	; 63
 206:	0f 90       	pop	r0
 208:	1f 90       	pop	r1
 20a:	18 95       	reti

0000020c <__vector_6>:
ISR(INT5_vect)//Buzzer2
{  
 20c:	1f 92       	push	r1
 20e:	0f 92       	push	r0
 210:	0f b6       	in	r0, 0x3f	; 63
 212:	0f 92       	push	r0
 214:	11 24       	eor	r1, r1
 216:	0b b6       	in	r0, 0x3b	; 59
 218:	0f 92       	push	r0
 21a:	2f 93       	push	r18
 21c:	3f 93       	push	r19
 21e:	4f 93       	push	r20
 220:	5f 93       	push	r21
 222:	6f 93       	push	r22
 224:	7f 93       	push	r23
 226:	8f 93       	push	r24
 228:	9f 93       	push	r25
 22a:	af 93       	push	r26
 22c:	bf 93       	push	r27
 22e:	cf 93       	push	r28
 230:	df 93       	push	r29
 232:	ef 93       	push	r30
 234:	ff 93       	push	r31
	if(i<7)
 236:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 23a:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 23e:	87 30       	cpi	r24, 0x07	; 7
 240:	91 05       	cpc	r25, r1
 242:	a0 f5       	brcc	.+104    	; 0x2ac <__vector_6+0xa0>
	{
		if((arr[i-1]==2)||(arr[i-3]==2)||(arr[i-2]==2))
 244:	fc 01       	movw	r30, r24
 246:	ee 0f       	add	r30, r30
 248:	ff 1f       	adc	r31, r31
 24a:	e0 50       	subi	r30, 0x00	; 0
 24c:	ff 4f       	sbci	r31, 0xFF	; 255
 24e:	20 81       	ld	r18, Z
 250:	31 81       	ldd	r19, Z+1	; 0x01
 252:	22 30       	cpi	r18, 0x02	; 2
 254:	31 05       	cpc	r19, r1
 256:	a1 f0       	breq	.+40     	; 0x280 <__vector_6+0x74>
 258:	fc 01       	movw	r30, r24
 25a:	ee 0f       	add	r30, r30
 25c:	ff 1f       	adc	r31, r31
 25e:	e4 50       	subi	r30, 0x04	; 4
 260:	ff 4f       	sbci	r31, 0xFF	; 255
 262:	20 81       	ld	r18, Z
 264:	31 81       	ldd	r19, Z+1	; 0x01
 266:	22 30       	cpi	r18, 0x02	; 2
 268:	31 05       	cpc	r19, r1
 26a:	51 f0       	breq	.+20     	; 0x280 <__vector_6+0x74>
 26c:	fc 01       	movw	r30, r24
 26e:	ee 0f       	add	r30, r30
 270:	ff 1f       	adc	r31, r31
 272:	e2 50       	subi	r30, 0x02	; 2
 274:	ff 4f       	sbci	r31, 0xFF	; 255
 276:	20 81       	ld	r18, Z
 278:	31 81       	ldd	r19, Z+1	; 0x01
 27a:	22 30       	cpi	r18, 0x02	; 2
 27c:	31 05       	cpc	r19, r1
 27e:	41 f4       	brne	.+16     	; 0x290 <__vector_6+0x84>
		arr[i]=0;
 280:	88 0f       	add	r24, r24
 282:	99 1f       	adc	r25, r25
 284:	fc 01       	movw	r30, r24
 286:	ee 5f       	subi	r30, 0xFE	; 254
 288:	fe 4f       	sbci	r31, 0xFE	; 254
 28a:	11 82       	std	Z+1, r1	; 0x01
 28c:	10 82       	st	Z, r1
 28e:	0e c0       	rjmp	.+28     	; 0x2ac <__vector_6+0xa0>
		else
		{arr[i]=2;
 290:	fc 01       	movw	r30, r24
 292:	ee 0f       	add	r30, r30
 294:	ff 1f       	adc	r31, r31
 296:	ee 5f       	subi	r30, 0xFE	; 254
 298:	fe 4f       	sbci	r31, 0xFE	; 254
 29a:	22 e0       	ldi	r18, 0x02	; 2
 29c:	30 e0       	ldi	r19, 0x00	; 0
 29e:	31 83       	std	Z+1, r19	; 0x01
 2a0:	20 83       	st	Z, r18
			i++;
 2a2:	01 96       	adiw	r24, 0x01	; 1
 2a4:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
 2a8:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
		}
		
	}
	
	
	uart_data_transmit('A');
 2ac:	81 e4       	ldi	r24, 0x41	; 65
 2ae:	65 d1       	rcall	.+714    	; 0x57a <uart_data_transmit>
	uart_data_transmit(arr[3]+'0');
 2b0:	c2 e0       	ldi	r28, 0x02	; 2
 2b2:	d1 e0       	ldi	r29, 0x01	; 1
 2b4:	8e 81       	ldd	r24, Y+6	; 0x06
 2b6:	80 5d       	subi	r24, 0xD0	; 208
	uart_data_transmit(arr[4]+'0');
 2b8:	60 d1       	rcall	.+704    	; 0x57a <uart_data_transmit>
 2ba:	88 85       	ldd	r24, Y+8	; 0x08
	uart_data_transmit(arr[5]+'0');
 2bc:	80 5d       	subi	r24, 0xD0	; 208
 2be:	5d d1       	rcall	.+698    	; 0x57a <uart_data_transmit>
	uart_data_transmit(arr[6]+'0');
 2c0:	8a 85       	ldd	r24, Y+10	; 0x0a
 2c2:	80 5d       	subi	r24, 0xD0	; 208
 2c4:	5a d1       	rcall	.+692    	; 0x57a <uart_data_transmit>
	uart_data_transmit('B');
 2c6:	8c 85       	ldd	r24, Y+12	; 0x0c
 2c8:	80 5d       	subi	r24, 0xD0	; 208
 2ca:	57 d1       	rcall	.+686    	; 0x57a <uart_data_transmit>
	}
 2cc:	82 e4       	ldi	r24, 0x42	; 66
 2ce:	55 d1       	rcall	.+682    	; 0x57a <uart_data_transmit>
 2d0:	ff 91       	pop	r31
 2d2:	ef 91       	pop	r30
 2d4:	df 91       	pop	r29
 2d6:	cf 91       	pop	r28
 2d8:	bf 91       	pop	r27
 2da:	af 91       	pop	r26
 2dc:	9f 91       	pop	r25
 2de:	8f 91       	pop	r24
 2e0:	7f 91       	pop	r23
 2e2:	6f 91       	pop	r22
 2e4:	5f 91       	pop	r21
 2e6:	4f 91       	pop	r20
 2e8:	3f 91       	pop	r19
 2ea:	2f 91       	pop	r18
 2ec:	0f 90       	pop	r0
 2ee:	0b be       	out	0x3b, r0	; 59
 2f0:	0f 90       	pop	r0
 2f2:	0f be       	out	0x3f, r0	; 63
 2f4:	0f 90       	pop	r0
 2f6:	1f 90       	pop	r1
 2f8:	18 95       	reti

000002fa <__vector_7>:

ISR(INT6_vect)
{  
 2fa:	1f 92       	push	r1
 2fc:	0f 92       	push	r0
 2fe:	0f b6       	in	r0, 0x3f	; 63
 300:	0f 92       	push	r0
 302:	11 24       	eor	r1, r1
 304:	0b b6       	in	r0, 0x3b	; 59
 306:	0f 92       	push	r0
 308:	2f 93       	push	r18
 30a:	3f 93       	push	r19
 30c:	4f 93       	push	r20
 30e:	5f 93       	push	r21
 310:	6f 93       	push	r22
 312:	7f 93       	push	r23
 314:	8f 93       	push	r24
 316:	9f 93       	push	r25
 318:	af 93       	push	r26
 31a:	bf 93       	push	r27
 31c:	cf 93       	push	r28
 31e:	df 93       	push	r29
 320:	ef 93       	push	r30
 322:	ff 93       	push	r31
	if(i<7)
 324:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 328:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 32c:	87 30       	cpi	r24, 0x07	; 7
 32e:	91 05       	cpc	r25, r1
 330:	a0 f5       	brcc	.+104    	; 0x39a <__vector_7+0xa0>
	{
		if((arr[i-1]==3)||(arr[i-3]==3)||(arr[i-2]==3))
 332:	fc 01       	movw	r30, r24
 334:	ee 0f       	add	r30, r30
 336:	ff 1f       	adc	r31, r31
 338:	e0 50       	subi	r30, 0x00	; 0
 33a:	ff 4f       	sbci	r31, 0xFF	; 255
 33c:	20 81       	ld	r18, Z
 33e:	31 81       	ldd	r19, Z+1	; 0x01
 340:	23 30       	cpi	r18, 0x03	; 3
 342:	31 05       	cpc	r19, r1
 344:	a1 f0       	breq	.+40     	; 0x36e <__vector_7+0x74>
 346:	fc 01       	movw	r30, r24
 348:	ee 0f       	add	r30, r30
 34a:	ff 1f       	adc	r31, r31
 34c:	e4 50       	subi	r30, 0x04	; 4
 34e:	ff 4f       	sbci	r31, 0xFF	; 255
 350:	20 81       	ld	r18, Z
 352:	31 81       	ldd	r19, Z+1	; 0x01
 354:	23 30       	cpi	r18, 0x03	; 3
 356:	31 05       	cpc	r19, r1
 358:	51 f0       	breq	.+20     	; 0x36e <__vector_7+0x74>
 35a:	fc 01       	movw	r30, r24
 35c:	ee 0f       	add	r30, r30
 35e:	ff 1f       	adc	r31, r31
 360:	e2 50       	subi	r30, 0x02	; 2
 362:	ff 4f       	sbci	r31, 0xFF	; 255
 364:	20 81       	ld	r18, Z
 366:	31 81       	ldd	r19, Z+1	; 0x01
 368:	23 30       	cpi	r18, 0x03	; 3
 36a:	31 05       	cpc	r19, r1
 36c:	41 f4       	brne	.+16     	; 0x37e <__vector_7+0x84>
		arr[i]=0;
 36e:	88 0f       	add	r24, r24
 370:	99 1f       	adc	r25, r25
 372:	fc 01       	movw	r30, r24
 374:	ee 5f       	subi	r30, 0xFE	; 254
 376:	fe 4f       	sbci	r31, 0xFE	; 254
 378:	11 82       	std	Z+1, r1	; 0x01
 37a:	10 82       	st	Z, r1
 37c:	0e c0       	rjmp	.+28     	; 0x39a <__vector_7+0xa0>
		else
		{arr[i]=3;
 37e:	fc 01       	movw	r30, r24
 380:	ee 0f       	add	r30, r30
 382:	ff 1f       	adc	r31, r31
 384:	ee 5f       	subi	r30, 0xFE	; 254
 386:	fe 4f       	sbci	r31, 0xFE	; 254
 388:	23 e0       	ldi	r18, 0x03	; 3
 38a:	30 e0       	ldi	r19, 0x00	; 0
 38c:	31 83       	std	Z+1, r19	; 0x01
 38e:	20 83       	st	Z, r18
			i++;
 390:	01 96       	adiw	r24, 0x01	; 1
 392:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
 396:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
		}
		
	}
	
	uart_data_transmit('A');
 39a:	81 e4       	ldi	r24, 0x41	; 65
 39c:	ee d0       	rcall	.+476    	; 0x57a <uart_data_transmit>
	uart_data_transmit(arr[3]+'0');
 39e:	c2 e0       	ldi	r28, 0x02	; 2
 3a0:	d1 e0       	ldi	r29, 0x01	; 1
 3a2:	8e 81       	ldd	r24, Y+6	; 0x06
 3a4:	80 5d       	subi	r24, 0xD0	; 208
	uart_data_transmit(arr[4]+'0');
 3a6:	e9 d0       	rcall	.+466    	; 0x57a <uart_data_transmit>
 3a8:	88 85       	ldd	r24, Y+8	; 0x08
	uart_data_transmit(arr[5]+'0');
 3aa:	80 5d       	subi	r24, 0xD0	; 208
 3ac:	e6 d0       	rcall	.+460    	; 0x57a <uart_data_transmit>
	uart_data_transmit(arr[6]+'0');
 3ae:	8a 85       	ldd	r24, Y+10	; 0x0a
 3b0:	80 5d       	subi	r24, 0xD0	; 208
 3b2:	e3 d0       	rcall	.+454    	; 0x57a <uart_data_transmit>
	//USART_TransmitString(arr);
	uart_data_transmit('B');
 3b4:	8c 85       	ldd	r24, Y+12	; 0x0c
 3b6:	80 5d       	subi	r24, 0xD0	; 208
 3b8:	e0 d0       	rcall	.+448    	; 0x57a <uart_data_transmit>
}
 3ba:	82 e4       	ldi	r24, 0x42	; 66
 3bc:	de d0       	rcall	.+444    	; 0x57a <uart_data_transmit>
 3be:	ff 91       	pop	r31
 3c0:	ef 91       	pop	r30
 3c2:	df 91       	pop	r29
 3c4:	cf 91       	pop	r28
 3c6:	bf 91       	pop	r27
 3c8:	af 91       	pop	r26
 3ca:	9f 91       	pop	r25
 3cc:	8f 91       	pop	r24
 3ce:	7f 91       	pop	r23
 3d0:	6f 91       	pop	r22
 3d2:	5f 91       	pop	r21
 3d4:	4f 91       	pop	r20
 3d6:	3f 91       	pop	r19
 3d8:	2f 91       	pop	r18
 3da:	0f 90       	pop	r0
 3dc:	0b be       	out	0x3b, r0	; 59
 3de:	0f 90       	pop	r0
 3e0:	0f be       	out	0x3f, r0	; 63
 3e2:	0f 90       	pop	r0
 3e4:	1f 90       	pop	r1
 3e6:	18 95       	reti

000003e8 <__vector_8>:
ISR(INT7_vect)//Buzzer4
{
 3e8:	1f 92       	push	r1
 3ea:	0f 92       	push	r0
 3ec:	0f b6       	in	r0, 0x3f	; 63
 3ee:	0f 92       	push	r0
 3f0:	11 24       	eor	r1, r1
 3f2:	0b b6       	in	r0, 0x3b	; 59
 3f4:	0f 92       	push	r0
 3f6:	2f 93       	push	r18
 3f8:	3f 93       	push	r19
 3fa:	4f 93       	push	r20
 3fc:	5f 93       	push	r21
 3fe:	6f 93       	push	r22
 400:	7f 93       	push	r23
 402:	8f 93       	push	r24
 404:	9f 93       	push	r25
 406:	af 93       	push	r26
 408:	bf 93       	push	r27
 40a:	cf 93       	push	r28
 40c:	df 93       	push	r29
 40e:	ef 93       	push	r30
 410:	ff 93       	push	r31

	if(i<7)
 412:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 416:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 41a:	87 30       	cpi	r24, 0x07	; 7
 41c:	91 05       	cpc	r25, r1
 41e:	a0 f5       	brcc	.+104    	; 0x488 <__LOCK_REGION_LENGTH__+0x88>
	{
		if((arr[i-1]==4)||(arr[i-3]==4)||(arr[i-2]==4))
 420:	fc 01       	movw	r30, r24
 422:	ee 0f       	add	r30, r30
 424:	ff 1f       	adc	r31, r31
 426:	e0 50       	subi	r30, 0x00	; 0
 428:	ff 4f       	sbci	r31, 0xFF	; 255
 42a:	20 81       	ld	r18, Z
 42c:	31 81       	ldd	r19, Z+1	; 0x01
 42e:	24 30       	cpi	r18, 0x04	; 4
 430:	31 05       	cpc	r19, r1
 432:	a1 f0       	breq	.+40     	; 0x45c <__LOCK_REGION_LENGTH__+0x5c>
 434:	fc 01       	movw	r30, r24
 436:	ee 0f       	add	r30, r30
 438:	ff 1f       	adc	r31, r31
 43a:	e4 50       	subi	r30, 0x04	; 4
 43c:	ff 4f       	sbci	r31, 0xFF	; 255
 43e:	20 81       	ld	r18, Z
 440:	31 81       	ldd	r19, Z+1	; 0x01
 442:	24 30       	cpi	r18, 0x04	; 4
 444:	31 05       	cpc	r19, r1
 446:	51 f0       	breq	.+20     	; 0x45c <__LOCK_REGION_LENGTH__+0x5c>
 448:	fc 01       	movw	r30, r24
 44a:	ee 0f       	add	r30, r30
 44c:	ff 1f       	adc	r31, r31
 44e:	e2 50       	subi	r30, 0x02	; 2
 450:	ff 4f       	sbci	r31, 0xFF	; 255
 452:	20 81       	ld	r18, Z
 454:	31 81       	ldd	r19, Z+1	; 0x01
 456:	24 30       	cpi	r18, 0x04	; 4
 458:	31 05       	cpc	r19, r1
 45a:	41 f4       	brne	.+16     	; 0x46c <__LOCK_REGION_LENGTH__+0x6c>
		arr[i]=0;
 45c:	88 0f       	add	r24, r24
 45e:	99 1f       	adc	r25, r25
 460:	fc 01       	movw	r30, r24
 462:	ee 5f       	subi	r30, 0xFE	; 254
 464:	fe 4f       	sbci	r31, 0xFE	; 254
 466:	11 82       	std	Z+1, r1	; 0x01
 468:	10 82       	st	Z, r1
 46a:	0e c0       	rjmp	.+28     	; 0x488 <__LOCK_REGION_LENGTH__+0x88>
		else
		{arr[i]=4;
 46c:	fc 01       	movw	r30, r24
 46e:	ee 0f       	add	r30, r30
 470:	ff 1f       	adc	r31, r31
 472:	ee 5f       	subi	r30, 0xFE	; 254
 474:	fe 4f       	sbci	r31, 0xFE	; 254
 476:	24 e0       	ldi	r18, 0x04	; 4
 478:	30 e0       	ldi	r19, 0x00	; 0
 47a:	31 83       	std	Z+1, r19	; 0x01
 47c:	20 83       	st	Z, r18
			i++;
 47e:	01 96       	adiw	r24, 0x01	; 1
 480:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
 484:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
		}
		
	}
	
	uart_data_transmit('A');
 488:	81 e4       	ldi	r24, 0x41	; 65
 48a:	77 d0       	rcall	.+238    	; 0x57a <uart_data_transmit>
	uart_data_transmit(arr[3]+'0');
 48c:	c2 e0       	ldi	r28, 0x02	; 2
 48e:	d1 e0       	ldi	r29, 0x01	; 1
 490:	8e 81       	ldd	r24, Y+6	; 0x06
 492:	80 5d       	subi	r24, 0xD0	; 208
	uart_data_transmit(arr[4]+'0');
 494:	72 d0       	rcall	.+228    	; 0x57a <uart_data_transmit>
 496:	88 85       	ldd	r24, Y+8	; 0x08
	uart_data_transmit(arr[5]+'0');
 498:	80 5d       	subi	r24, 0xD0	; 208
 49a:	6f d0       	rcall	.+222    	; 0x57a <uart_data_transmit>
	uart_data_transmit(arr[6]+'0');
 49c:	8a 85       	ldd	r24, Y+10	; 0x0a
 49e:	80 5d       	subi	r24, 0xD0	; 208
 4a0:	6c d0       	rcall	.+216    	; 0x57a <uart_data_transmit>
	uart_data_transmit('B');
 4a2:	8c 85       	ldd	r24, Y+12	; 0x0c
 4a4:	80 5d       	subi	r24, 0xD0	; 208
 4a6:	69 d0       	rcall	.+210    	; 0x57a <uart_data_transmit>
}
 4a8:	82 e4       	ldi	r24, 0x42	; 66
 4aa:	67 d0       	rcall	.+206    	; 0x57a <uart_data_transmit>
 4ac:	ff 91       	pop	r31
 4ae:	ef 91       	pop	r30
 4b0:	df 91       	pop	r29
 4b2:	cf 91       	pop	r28
 4b4:	bf 91       	pop	r27
 4b6:	af 91       	pop	r26
 4b8:	9f 91       	pop	r25
 4ba:	8f 91       	pop	r24
 4bc:	7f 91       	pop	r23
 4be:	6f 91       	pop	r22
 4c0:	5f 91       	pop	r21
 4c2:	4f 91       	pop	r20
 4c4:	3f 91       	pop	r19
 4c6:	2f 91       	pop	r18
 4c8:	0f 90       	pop	r0
 4ca:	0b be       	out	0x3b, r0	; 59
 4cc:	0f 90       	pop	r0
 4ce:	0f be       	out	0x3f, r0	; 63
 4d0:	0f 90       	pop	r0
 4d2:	1f 90       	pop	r1
 4d4:	18 95       	reti

000004d6 <__vector_18>:
ISR(USART0_RX_vect)//After a round or so
{
 4d6:	1f 92       	push	r1
 4d8:	0f 92       	push	r0
 4da:	0f b6       	in	r0, 0x3f	; 63
 4dc:	0f 92       	push	r0
 4de:	11 24       	eor	r1, r1
 4e0:	0b b6       	in	r0, 0x3b	; 59
 4e2:	0f 92       	push	r0
 4e4:	2f 93       	push	r18
 4e6:	3f 93       	push	r19
 4e8:	4f 93       	push	r20
 4ea:	5f 93       	push	r21
 4ec:	6f 93       	push	r22
 4ee:	7f 93       	push	r23
 4f0:	8f 93       	push	r24
 4f2:	9f 93       	push	r25
 4f4:	af 93       	push	r26
 4f6:	bf 93       	push	r27
 4f8:	ef 93       	push	r30
	char receive_data = uart_data_receive();
 4fa:	ff 93       	push	r31
	if(receive_data == '0')
 4fc:	42 d0       	rcall	.+132    	; 0x582 <uart_data_receive>
 4fe:	80 33       	cpi	r24, 0x30	; 48
	{
	i=3;
 500:	b1 f4       	brne	.+44     	; 0x52e <__vector_18+0x58>
 502:	83 e0       	ldi	r24, 0x03	; 3
 504:	90 e0       	ldi	r25, 0x00	; 0
 506:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
 50a:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
	arr[3]=0;
 50e:	e2 e0       	ldi	r30, 0x02	; 2
 510:	f1 e0       	ldi	r31, 0x01	; 1
 512:	17 82       	std	Z+7, r1	; 0x07
	arr[4]=0;
 514:	16 82       	std	Z+6, r1	; 0x06
 516:	11 86       	std	Z+9, r1	; 0x09
	arr[5]=0;
 518:	10 86       	std	Z+8, r1	; 0x08
 51a:	13 86       	std	Z+11, r1	; 0x0b
	arr[6]=0;
 51c:	12 86       	std	Z+10, r1	; 0x0a
 51e:	15 86       	std	Z+13, r1	; 0x0d
	//USART_TransmitString("REC");
	PORTF &=~((1<<PINF0)|(1<<PINF2)|(1<<PINF4)|(1<<PINF6));
 520:	14 86       	std	Z+12, r1	; 0x0c
 522:	e2 e6       	ldi	r30, 0x62	; 98
 524:	f0 e0       	ldi	r31, 0x00	; 0
 526:	80 81       	ld	r24, Z
 528:	8a 7a       	andi	r24, 0xAA	; 170
 52a:	80 83       	st	Z, r24
	}
if(receive_data == '1')
 52c:	07 c0       	rjmp	.+14     	; 0x53c <__vector_18+0x66>
 52e:	81 33       	cpi	r24, 0x31	; 49
	PORTF|=((1<<PINF0)|(1<<PINF2)|(1<<PINF4)|(1<<PINF6));
 530:	29 f4       	brne	.+10     	; 0x53c <__vector_18+0x66>
 532:	e2 e6       	ldi	r30, 0x62	; 98
 534:	f0 e0       	ldi	r31, 0x00	; 0
 536:	80 81       	ld	r24, Z
 538:	85 65       	ori	r24, 0x55	; 85
}
 53a:	80 83       	st	Z, r24
 53c:	ff 91       	pop	r31
 53e:	ef 91       	pop	r30
 540:	bf 91       	pop	r27
 542:	af 91       	pop	r26
 544:	9f 91       	pop	r25
 546:	8f 91       	pop	r24
 548:	7f 91       	pop	r23
 54a:	6f 91       	pop	r22
 54c:	5f 91       	pop	r21
 54e:	4f 91       	pop	r20
 550:	3f 91       	pop	r19
 552:	2f 91       	pop	r18
 554:	0f 90       	pop	r0
 556:	0b be       	out	0x3b, r0	; 59
 558:	0f 90       	pop	r0
 55a:	0f be       	out	0x3f, r0	; 63
 55c:	0f 90       	pop	r0
 55e:	1f 90       	pop	r1
 560:	18 95       	reti

00000562 <USART_Init>:

void USART_Init(unsigned int baud)
{
//    sei();
	//Initialize baud Rate(9600)
	UBRR0H=(unsigned char)(baud>>8);
 562:	90 93 90 00 	sts	0x0090, r25	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
	UBRR0L=(unsigned char)baud;
 566:	89 b9       	out	0x09, r24	; 9
	//TX RX Enable
	UCSR0B|=(1<<RXEN0)|(1<<TXEN0);//|(1<<UCSZ02);
 568:	8a b1       	in	r24, 0x0a	; 10
 56a:	88 61       	ori	r24, 0x18	; 24
 56c:	8a b9       	out	0x0a, r24	; 10
	//Set 8-bit data, Parity disabled
	UCSR0C |= (3<<UCSZ00);
 56e:	e5 e9       	ldi	r30, 0x95	; 149
 570:	f0 e0       	ldi	r31, 0x00	; 0
 572:	80 81       	ld	r24, Z
 574:	86 60       	ori	r24, 0x06	; 6
 576:	80 83       	st	Z, r24
 578:	08 95       	ret

0000057a <uart_data_transmit>:

/*The function is declared to transmit data.*/
void uart_data_transmit (unsigned char data)
{
	//int UBRRH_VALUE;
	while (!((UCSR0A)&(1<<UDRE0)));
 57a:	5d 9b       	sbis	0x0b, 5	; 11
 57c:	fe cf       	rjmp	.-4      	; 0x57a <uart_data_transmit>
	UDR0 = data;
 57e:	8c b9       	out	0x0c, r24	; 12
 580:	08 95       	ret

00000582 <uart_data_receive>:
	
}
/*The function is declared to receive data.*/
unsigned char uart_data_receive(void)
{
	while(!((UCSR0A) & (1<<RXC0)));                   // wait while data is being received
 582:	5f 9b       	sbis	0x0b, 7	; 11
 584:	fe cf       	rjmp	.-4      	; 0x582 <uart_data_receive>
	return UDR0;                                   // return 8-bit data
 586:	8c b1       	in	r24, 0x0c	; 12
}
 588:	08 95       	ret

0000058a <_exit>:
 58a:	f8 94       	cli

0000058c <__stop_program>:
 58c:	ff cf       	rjmp	.-2      	; 0x58c <__stop_program>
