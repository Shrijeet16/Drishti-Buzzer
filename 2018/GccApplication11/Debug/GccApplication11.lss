
GccApplication11.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000006  00800100  00000436  000004ca  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000436  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800106  00800106  000004d0  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  000004d0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000085  00000000  00000000  00000b9c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000000c0  00000000  00000000  00000c28  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000006c3  00000000  00000000  00000ce8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000001c8  00000000  00000000  000013ab  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000042b  00000000  00000000  00001573  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001a0  00000000  00000000  000019a0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000182  00000000  00000000  00001b40  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000002af  00000000  00000000  00001cc2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
   4:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__vector_1>
   8:	0c 94 24 01 	jmp	0x248	; 0x248 <__vector_2>
   c:	0c 94 6b 01 	jmp	0x2d6	; 0x2d6 <__vector_3>
  10:	0c 94 b2 01 	jmp	0x364	; 0x364 <__vector_4>
  14:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  18:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  1c:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  20:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  24:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  28:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  2c:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  30:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  34:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  38:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  3c:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  40:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  44:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  48:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  4c:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  50:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  54:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  58:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  5c:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  60:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  64:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  68:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  6c:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  70:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  74:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  78:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  7c:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  80:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  84:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  88:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e6 e3       	ldi	r30, 0x36	; 54
  a0:	f4 e0       	ldi	r31, 0x04	; 4
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a6 30       	cpi	r26, 0x06	; 6
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>
  b2:	1b be       	out	0x3b, r1	; 59

000000b4 <__do_clear_bss>:
  b4:	11 e0       	ldi	r17, 0x01	; 1
  b6:	a6 e0       	ldi	r26, 0x06	; 6
  b8:	b1 e0       	ldi	r27, 0x01	; 1
  ba:	01 c0       	rjmp	.+2      	; 0xbe <.do_clear_bss_start>

000000bc <.do_clear_bss_loop>:
  bc:	1d 92       	st	X+, r1

000000be <.do_clear_bss_start>:
  be:	a7 30       	cpi	r26, 0x07	; 7
  c0:	b1 07       	cpc	r27, r17
  c2:	e1 f7       	brne	.-8      	; 0xbc <.do_clear_bss_loop>
  c4:	0e 94 a5 00 	call	0x14a	; 0x14a <main>
  c8:	0c 94 19 02 	jmp	0x432	; 0x432 <_exit>

000000cc <__bad_interrupt>:
  cc:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000d0 <interrupt_init>:



void interrupt_init()
{
	DDRD = 0x00;	//for INT input
  d0:	11 ba       	out	0x11, r1	; 17
	
	PORTD =0x00;	//for low 0V
  d2:	12 ba       	out	0x12, r1	; 18

	
	EICRA=0x00;//register clear
  d4:	ea e6       	ldi	r30, 0x6A	; 106
  d6:	f0 e0       	ldi	r31, 0x00	; 0
  d8:	10 82       	st	Z, r1
	EICRA=0xFF;//all INT0,1,2,3 as rising edge
  da:	8f ef       	ldi	r24, 0xFF	; 255
  dc:	80 83       	st	Z, r24
	
	
	
	EIMSK=0x00;//register clear
  de:	19 be       	out	0x39, r1	; 57
	EIMSK=0x0F;//Enable INT0,1,2,3
  e0:	8f e0       	ldi	r24, 0x0F	; 15
  e2:	89 bf       	out	0x39, r24	; 57
	
}
  e4:	08 95       	ret

000000e6 <Reset>:



 void Reset()
{
	DDRB  = 0b01000000;
  e6:	80 e4       	ldi	r24, 0x40	; 64
  e8:	87 bb       	out	0x17, r24	; 23
	PORTB = 0b00000000;
  ea:	18 ba       	out	0x18, r1	; 24
	//for(int i=0;i<3;++i)
	INT_Number[4] = 0 ;
  ec:	10 92 04 01 	sts	0x0104, r1
	count =1;
  f0:	81 e0       	ldi	r24, 0x01	; 1
  f2:	90 e0       	ldi	r25, 0x00	; 0
  f4:	90 93 05 01 	sts	0x0105, r25
  f8:	80 93 04 01 	sts	0x0104, r24
}
  fc:	08 95       	ret

000000fe <usart_recieve_char>:
volatile unsigned char INT_Number[4]="0000";


unsigned char usart_recieve_char()
{
	while (! (UCSR0A & (1 << RXC0)) );
  fe:	5f 9b       	sbis	0x0b, 7	; 11
 100:	fe cf       	rjmp	.-4      	; 0xfe <usart_recieve_char>
	return UDR0;
 102:	8c b1       	in	r24, 0x0c	; 12
		
}
 104:	08 95       	ret

00000106 <usart_initialization>:

void usart_initialization()
{
	//sei();
	
	UBRR0H = (unsigned char) (baud >> 8);
 106:	10 92 90 00 	sts	0x0090, r1
	UBRR0L = (unsigned char) (baud);
 10a:	83 e3       	ldi	r24, 0x33	; 51
 10c:	89 b9       	out	0x09, r24	; 9
	
	UCSR0B = 0b00011000;
 10e:	88 e1       	ldi	r24, 0x18	; 24
 110:	8a b9       	out	0x0a, r24	; 10
	UCSR0C = 0b00000110;
 112:	86 e0       	ldi	r24, 0x06	; 6
 114:	80 93 95 00 	sts	0x0095, r24
	
}
 118:	08 95       	ret

0000011a <usart_transmit_char>:

void usart_transmit_char(unsigned char data)
{
	while ( !( UCSR0A & (1<<UDRE0)) );
 11a:	5d 9b       	sbis	0x0b, 5	; 11
 11c:	fe cf       	rjmp	.-4      	; 0x11a <usart_transmit_char>
	UDR0=data;
 11e:	8c b9       	out	0x0c, r24	; 12
}
 120:	08 95       	ret

00000122 <usart_transmit_string>:



void usart_transmit_string(char *str)
{
 122:	cf 93       	push	r28
 124:	df 93       	push	r29
 126:	ec 01       	movw	r28, r24
	while(*str > 0)
 128:	88 81       	ld	r24, Y
 12a:	88 23       	and	r24, r24
 12c:	31 f0       	breq	.+12     	; 0x13a <usart_transmit_string+0x18>
	UDR0=data;
}



void usart_transmit_string(char *str)
 12e:	21 96       	adiw	r28, 0x01	; 1
{
	while(*str > 0)
	{
		usart_transmit_char(*str);
 130:	0e 94 8d 00 	call	0x11a	; 0x11a <usart_transmit_char>



void usart_transmit_string(char *str)
{
	while(*str > 0)
 134:	89 91       	ld	r24, Y+
 136:	88 23       	and	r24, r24
 138:	d9 f7       	brne	.-10     	; 0x130 <usart_transmit_string+0xe>
	{
		usart_transmit_char(*str);
		str++;
	}
	
}
 13a:	df 91       	pop	r29
 13c:	cf 91       	pop	r28
 13e:	08 95       	ret

00000140 <usart_interrupt_enable>:

void usart_interrupt_enable()
{
	UCSR0B |= (1<<RXCIE0);
 140:	57 9a       	sbi	0x0a, 7	; 10
	
	recieve_char = UDR0;
 142:	8c b1       	in	r24, 0x0c	; 12
 144:	80 93 06 01 	sts	0x0106, r24
	//usart_transmit_char('a');
	
}
 148:	08 95       	ret

0000014a <main>:
int main(void)
{
	int count1=0 ;
	int p;
	
	sei();
 14a:	78 94       	sei
	
	TCCR1B |= (1<<CS12);
 14c:	8e b5       	in	r24, 0x2e	; 46
 14e:	84 60       	ori	r24, 0x04	; 4
 150:	8e bd       	out	0x2e, r24	; 46
	
	Reset();
 152:	0f 2e       	mov	r0, r31
 154:	f3 e7       	ldi	r31, 0x73	; 115
 156:	af 2e       	mov	r10, r31
 158:	f0 e0       	ldi	r31, 0x00	; 0
 15a:	bf 2e       	mov	r11, r31
 15c:	f0 2d       	mov	r31, r0
 15e:	f5 01       	movw	r30, r10
 160:	09 95       	icall
	
	interrupt_init();				
 162:	0e 94 68 00 	call	0xd0	; 0xd0 <interrupt_init>
	usart_initialization();
 166:	0e 94 83 00 	call	0x106	; 0x106 <usart_initialization>
}



int main(void)
{
 16a:	00 e0       	ldi	r16, 0x00	; 0
 16c:	10 e0       	ldi	r17, 0x00	; 0
		
		if (count1==5)
		{
			p++;
			count1=0;
			usart_transmit_string(INT_Number);
 16e:	0f 2e       	mov	r0, r31
 170:	f0 e0       	ldi	r31, 0x00	; 0
 172:	ef 2e       	mov	r14, r31
 174:	f1 e0       	ldi	r31, 0x01	; 1
 176:	ff 2e       	mov	r15, r31
 178:	f0 2d       	mov	r31, r0
			if (p%10==0)
 17a:	0f 2e       	mov	r0, r31
 17c:	fa e0       	ldi	r31, 0x0A	; 10
 17e:	cf 2e       	mov	r12, r31
 180:	dd 24       	eor	r13, r13
 182:	f0 2d       	mov	r31, r0
}



int main(void)
{
 184:	98 01       	movw	r18, r16
	
	interrupt_init();				
	usart_initialization();
	while(1)
    {		
		if (TCNT1>31250)
 186:	8c b5       	in	r24, 0x2c	; 44
 188:	9d b5       	in	r25, 0x2d	; 45
 18a:	4a e7       	ldi	r20, 0x7A	; 122
 18c:	83 31       	cpi	r24, 0x13	; 19
 18e:	94 07       	cpc	r25, r20
 190:	20 f0       	brcs	.+8      	; 0x19a <main+0x50>
		{
			count1++;
 192:	2f 5f       	subi	r18, 0xFF	; 255
 194:	3f 4f       	sbci	r19, 0xFF	; 255
			TCNT1=0;
 196:	1d bc       	out	0x2d, r1	; 45
 198:	1c bc       	out	0x2c, r1	; 44
			
		}
		
		if (count1==5)
 19a:	25 30       	cpi	r18, 0x05	; 5
 19c:	31 05       	cpc	r19, r1
 19e:	99 f7       	brne	.-26     	; 0x186 <main+0x3c>
		{
			p++;
 1a0:	21 96       	adiw	r28, 0x01	; 1
			count1=0;
			usart_transmit_string(INT_Number);
 1a2:	c7 01       	movw	r24, r14
 1a4:	0e 94 91 00 	call	0x122	; 0x122 <usart_transmit_string>
			if (p%10==0)
 1a8:	ce 01       	movw	r24, r28
 1aa:	b6 01       	movw	r22, r12
 1ac:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__divmodhi4>
 1b0:	00 97       	sbiw	r24, 0x00	; 0
 1b2:	41 f7       	brne	.-48     	; 0x184 <main+0x3a>
			{
				Reset();
 1b4:	f5 01       	movw	r30, r10
 1b6:	09 95       	icall
 1b8:	e5 cf       	rjmp	.-54     	; 0x184 <main+0x3a>

000001ba <__vector_1>:
	
}


ISR(INT0_vect)
{
 1ba:	1f 92       	push	r1
 1bc:	0f 92       	push	r0
 1be:	0f b6       	in	r0, 0x3f	; 63
 1c0:	0f 92       	push	r0
 1c2:	11 24       	eor	r1, r1
 1c4:	5f 93       	push	r21
 1c6:	6f 93       	push	r22
 1c8:	7f 93       	push	r23
 1ca:	8f 93       	push	r24
 1cc:	9f 93       	push	r25
 1ce:	af 93       	push	r26
 1d0:	bf 93       	push	r27
	//usart_transmit_string("I got INT0");
	//EIFR|=(1<<INTF0);
	//convert into character at that particuar position
	if (INT_Number[0]=='0')
 1d2:	80 91 00 01 	lds	r24, 0x0100
 1d6:	80 33       	cpi	r24, 0x30	; 48
 1d8:	59 f5       	brne	.+86     	; 0x230 <__vector_1+0x76>
	{
		//usart_transmit_string("I got INT0 and inside if");
		INT_Number[0]=(char)(count + '0');
 1da:	80 91 04 01 	lds	r24, 0x0104
 1de:	90 91 05 01 	lds	r25, 0x0105
 1e2:	80 5d       	subi	r24, 0xD0	; 208
 1e4:	80 93 00 01 	sts	0x0100, r24
		count++;
 1e8:	80 91 04 01 	lds	r24, 0x0104
 1ec:	90 91 05 01 	lds	r25, 0x0105
 1f0:	01 96       	adiw	r24, 0x01	; 1
 1f2:	90 93 05 01 	sts	0x0105, r25
 1f6:	80 93 04 01 	sts	0x0104, r24
		if(count%4!=0)
 1fa:	80 91 04 01 	lds	r24, 0x0104
 1fe:	90 91 05 01 	lds	r25, 0x0105
 202:	83 70       	andi	r24, 0x03	; 3
 204:	90 70       	andi	r25, 0x00	; 0
 206:	00 97       	sbiw	r24, 0x00	; 0
 208:	69 f0       	breq	.+26     	; 0x224 <__vector_1+0x6a>
		count=count%4;
 20a:	80 91 04 01 	lds	r24, 0x0104
 20e:	90 91 05 01 	lds	r25, 0x0105
 212:	64 e0       	ldi	r22, 0x04	; 4
 214:	70 e0       	ldi	r23, 0x00	; 0
 216:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__divmodhi4>
 21a:	90 93 05 01 	sts	0x0105, r25
 21e:	80 93 04 01 	sts	0x0104, r24
 222:	06 c0       	rjmp	.+12     	; 0x230 <__vector_1+0x76>
		else
		count=4;
 224:	84 e0       	ldi	r24, 0x04	; 4
 226:	90 e0       	ldi	r25, 0x00	; 0
 228:	90 93 05 01 	sts	0x0105, r25
 22c:	80 93 04 01 	sts	0x0104, r24

	}
}
 230:	bf 91       	pop	r27
 232:	af 91       	pop	r26
 234:	9f 91       	pop	r25
 236:	8f 91       	pop	r24
 238:	7f 91       	pop	r23
 23a:	6f 91       	pop	r22
 23c:	5f 91       	pop	r21
 23e:	0f 90       	pop	r0
 240:	0f be       	out	0x3f, r0	; 63
 242:	0f 90       	pop	r0
 244:	1f 90       	pop	r1
 246:	18 95       	reti

00000248 <__vector_2>:

ISR(INT1_vect)
{
 248:	1f 92       	push	r1
 24a:	0f 92       	push	r0
 24c:	0f b6       	in	r0, 0x3f	; 63
 24e:	0f 92       	push	r0
 250:	11 24       	eor	r1, r1
 252:	5f 93       	push	r21
 254:	6f 93       	push	r22
 256:	7f 93       	push	r23
 258:	8f 93       	push	r24
 25a:	9f 93       	push	r25
 25c:	af 93       	push	r26
 25e:	bf 93       	push	r27
	//EIFR|=(1<<INTF1);
//	usart_transmit_string("I got INT1");
	if (INT_Number[1]=='0')
 260:	80 91 01 01 	lds	r24, 0x0101
 264:	80 33       	cpi	r24, 0x30	; 48
 266:	59 f5       	brne	.+86     	; 0x2be <__vector_2+0x76>
	{
		//usart_transmit_string("I got INT1 and inside if");
		INT_Number[1]=(char)(count + '0');
 268:	80 91 04 01 	lds	r24, 0x0104
 26c:	90 91 05 01 	lds	r25, 0x0105
 270:	80 5d       	subi	r24, 0xD0	; 208
 272:	80 93 01 01 	sts	0x0101, r24
		count++;
 276:	80 91 04 01 	lds	r24, 0x0104
 27a:	90 91 05 01 	lds	r25, 0x0105
 27e:	01 96       	adiw	r24, 0x01	; 1
 280:	90 93 05 01 	sts	0x0105, r25
 284:	80 93 04 01 	sts	0x0104, r24
		if(count%4!=0)
 288:	80 91 04 01 	lds	r24, 0x0104
 28c:	90 91 05 01 	lds	r25, 0x0105
 290:	83 70       	andi	r24, 0x03	; 3
 292:	90 70       	andi	r25, 0x00	; 0
 294:	00 97       	sbiw	r24, 0x00	; 0
 296:	69 f0       	breq	.+26     	; 0x2b2 <__vector_2+0x6a>
		  count=count%4;
 298:	80 91 04 01 	lds	r24, 0x0104
 29c:	90 91 05 01 	lds	r25, 0x0105
 2a0:	64 e0       	ldi	r22, 0x04	; 4
 2a2:	70 e0       	ldi	r23, 0x00	; 0
 2a4:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__divmodhi4>
 2a8:	90 93 05 01 	sts	0x0105, r25
 2ac:	80 93 04 01 	sts	0x0104, r24
 2b0:	06 c0       	rjmp	.+12     	; 0x2be <__vector_2+0x76>
		else
		  count=4;
 2b2:	84 e0       	ldi	r24, 0x04	; 4
 2b4:	90 e0       	ldi	r25, 0x00	; 0
 2b6:	90 93 05 01 	sts	0x0105, r25
 2ba:	80 93 04 01 	sts	0x0104, r24
	
	}	
}
 2be:	bf 91       	pop	r27
 2c0:	af 91       	pop	r26
 2c2:	9f 91       	pop	r25
 2c4:	8f 91       	pop	r24
 2c6:	7f 91       	pop	r23
 2c8:	6f 91       	pop	r22
 2ca:	5f 91       	pop	r21
 2cc:	0f 90       	pop	r0
 2ce:	0f be       	out	0x3f, r0	; 63
 2d0:	0f 90       	pop	r0
 2d2:	1f 90       	pop	r1
 2d4:	18 95       	reti

000002d6 <__vector_3>:

ISR(INT2_vect)
{
 2d6:	1f 92       	push	r1
 2d8:	0f 92       	push	r0
 2da:	0f b6       	in	r0, 0x3f	; 63
 2dc:	0f 92       	push	r0
 2de:	11 24       	eor	r1, r1
 2e0:	5f 93       	push	r21
 2e2:	6f 93       	push	r22
 2e4:	7f 93       	push	r23
 2e6:	8f 93       	push	r24
 2e8:	9f 93       	push	r25
 2ea:	af 93       	push	r26
 2ec:	bf 93       	push	r27
		//usart_transmit_string("I got INT2");
		if (INT_Number[2]=='0')
 2ee:	80 91 02 01 	lds	r24, 0x0102
 2f2:	80 33       	cpi	r24, 0x30	; 48
 2f4:	59 f5       	brne	.+86     	; 0x34c <__vector_3+0x76>
		{
			//usart_transmit_string("I got INT2 and inside if");
	INT_Number[2]=(char)(count + '0');
 2f6:	80 91 04 01 	lds	r24, 0x0104
 2fa:	90 91 05 01 	lds	r25, 0x0105
 2fe:	80 5d       	subi	r24, 0xD0	; 208
 300:	80 93 02 01 	sts	0x0102, r24
	count++;
 304:	80 91 04 01 	lds	r24, 0x0104
 308:	90 91 05 01 	lds	r25, 0x0105
 30c:	01 96       	adiw	r24, 0x01	; 1
 30e:	90 93 05 01 	sts	0x0105, r25
 312:	80 93 04 01 	sts	0x0104, r24
	if(count%4!=0)
 316:	80 91 04 01 	lds	r24, 0x0104
 31a:	90 91 05 01 	lds	r25, 0x0105
 31e:	83 70       	andi	r24, 0x03	; 3
 320:	90 70       	andi	r25, 0x00	; 0
 322:	00 97       	sbiw	r24, 0x00	; 0
 324:	69 f0       	breq	.+26     	; 0x340 <__vector_3+0x6a>
	count=count%4;
 326:	80 91 04 01 	lds	r24, 0x0104
 32a:	90 91 05 01 	lds	r25, 0x0105
 32e:	64 e0       	ldi	r22, 0x04	; 4
 330:	70 e0       	ldi	r23, 0x00	; 0
 332:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__divmodhi4>
 336:	90 93 05 01 	sts	0x0105, r25
 33a:	80 93 04 01 	sts	0x0104, r24
 33e:	06 c0       	rjmp	.+12     	; 0x34c <__vector_3+0x76>
	else
	count=4;
 340:	84 e0       	ldi	r24, 0x04	; 4
 342:	90 e0       	ldi	r25, 0x00	; 0
 344:	90 93 05 01 	sts	0x0105, r25
 348:	80 93 04 01 	sts	0x0104, r24
	}	
}
 34c:	bf 91       	pop	r27
 34e:	af 91       	pop	r26
 350:	9f 91       	pop	r25
 352:	8f 91       	pop	r24
 354:	7f 91       	pop	r23
 356:	6f 91       	pop	r22
 358:	5f 91       	pop	r21
 35a:	0f 90       	pop	r0
 35c:	0f be       	out	0x3f, r0	; 63
 35e:	0f 90       	pop	r0
 360:	1f 90       	pop	r1
 362:	18 95       	reti

00000364 <__vector_4>:

ISR(INT3_vect)
{
 364:	1f 92       	push	r1
 366:	0f 92       	push	r0
 368:	0f b6       	in	r0, 0x3f	; 63
 36a:	0f 92       	push	r0
 36c:	11 24       	eor	r1, r1
 36e:	5f 93       	push	r21
 370:	6f 93       	push	r22
 372:	7f 93       	push	r23
 374:	8f 93       	push	r24
 376:	9f 93       	push	r25
 378:	af 93       	push	r26
 37a:	bf 93       	push	r27
	//	usart_transmit_string("I got INT3");
		if (INT_Number[3]=='0')
 37c:	80 91 03 01 	lds	r24, 0x0103
 380:	80 33       	cpi	r24, 0x30	; 48
 382:	21 f5       	brne	.+72     	; 0x3cc <__vector_4+0x68>
		{
		//	usart_transmit_string("I got INT3 and inside if");	INT_Number[3]=(char)(count + '0');
		count++;
 384:	80 91 04 01 	lds	r24, 0x0104
 388:	90 91 05 01 	lds	r25, 0x0105
 38c:	01 96       	adiw	r24, 0x01	; 1
 38e:	90 93 05 01 	sts	0x0105, r25
 392:	80 93 04 01 	sts	0x0104, r24
		if(count%4!=0)
 396:	80 91 04 01 	lds	r24, 0x0104
 39a:	90 91 05 01 	lds	r25, 0x0105
 39e:	83 70       	andi	r24, 0x03	; 3
 3a0:	90 70       	andi	r25, 0x00	; 0
 3a2:	00 97       	sbiw	r24, 0x00	; 0
 3a4:	69 f0       	breq	.+26     	; 0x3c0 <__vector_4+0x5c>
		count=count%4;
 3a6:	80 91 04 01 	lds	r24, 0x0104
 3aa:	90 91 05 01 	lds	r25, 0x0105
 3ae:	64 e0       	ldi	r22, 0x04	; 4
 3b0:	70 e0       	ldi	r23, 0x00	; 0
 3b2:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__divmodhi4>
 3b6:	90 93 05 01 	sts	0x0105, r25
 3ba:	80 93 04 01 	sts	0x0104, r24
 3be:	06 c0       	rjmp	.+12     	; 0x3cc <__vector_4+0x68>
		else
		count=4;
 3c0:	84 e0       	ldi	r24, 0x04	; 4
 3c2:	90 e0       	ldi	r25, 0x00	; 0
 3c4:	90 93 05 01 	sts	0x0105, r25
 3c8:	80 93 04 01 	sts	0x0104, r24
	}
}
 3cc:	bf 91       	pop	r27
 3ce:	af 91       	pop	r26
 3d0:	9f 91       	pop	r25
 3d2:	8f 91       	pop	r24
 3d4:	7f 91       	pop	r23
 3d6:	6f 91       	pop	r22
 3d8:	5f 91       	pop	r21
 3da:	0f 90       	pop	r0
 3dc:	0f be       	out	0x3f, r0	; 63
 3de:	0f 90       	pop	r0
 3e0:	1f 90       	pop	r1
 3e2:	18 95       	reti

000003e4 <__divmodhi4>:
 3e4:	97 fb       	bst	r25, 7
 3e6:	09 2e       	mov	r0, r25
 3e8:	07 26       	eor	r0, r23
 3ea:	0a d0       	rcall	.+20     	; 0x400 <__divmodhi4_neg1>
 3ec:	77 fd       	sbrc	r23, 7
 3ee:	04 d0       	rcall	.+8      	; 0x3f8 <__divmodhi4_neg2>
 3f0:	0c d0       	rcall	.+24     	; 0x40a <__udivmodhi4>
 3f2:	06 d0       	rcall	.+12     	; 0x400 <__divmodhi4_neg1>
 3f4:	00 20       	and	r0, r0
 3f6:	1a f4       	brpl	.+6      	; 0x3fe <__divmodhi4_exit>

000003f8 <__divmodhi4_neg2>:
 3f8:	70 95       	com	r23
 3fa:	61 95       	neg	r22
 3fc:	7f 4f       	sbci	r23, 0xFF	; 255

000003fe <__divmodhi4_exit>:
 3fe:	08 95       	ret

00000400 <__divmodhi4_neg1>:
 400:	f6 f7       	brtc	.-4      	; 0x3fe <__divmodhi4_exit>
 402:	90 95       	com	r25
 404:	81 95       	neg	r24
 406:	9f 4f       	sbci	r25, 0xFF	; 255
 408:	08 95       	ret

0000040a <__udivmodhi4>:
 40a:	aa 1b       	sub	r26, r26
 40c:	bb 1b       	sub	r27, r27
 40e:	51 e1       	ldi	r21, 0x11	; 17
 410:	07 c0       	rjmp	.+14     	; 0x420 <__udivmodhi4_ep>

00000412 <__udivmodhi4_loop>:
 412:	aa 1f       	adc	r26, r26
 414:	bb 1f       	adc	r27, r27
 416:	a6 17       	cp	r26, r22
 418:	b7 07       	cpc	r27, r23
 41a:	10 f0       	brcs	.+4      	; 0x420 <__udivmodhi4_ep>
 41c:	a6 1b       	sub	r26, r22
 41e:	b7 0b       	sbc	r27, r23

00000420 <__udivmodhi4_ep>:
 420:	88 1f       	adc	r24, r24
 422:	99 1f       	adc	r25, r25
 424:	5a 95       	dec	r21
 426:	a9 f7       	brne	.-22     	; 0x412 <__udivmodhi4_loop>
 428:	80 95       	com	r24
 42a:	90 95       	com	r25
 42c:	bc 01       	movw	r22, r24
 42e:	cd 01       	movw	r24, r26
 430:	08 95       	ret

00000432 <_exit>:
 432:	f8 94       	cli

00000434 <__stop_program>:
 434:	ff cf       	rjmp	.-2      	; 0x434 <__stop_program>
